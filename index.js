// Generated by CoffeeScript 1.9.2
module.exports = function(moment) {
  var every;
  if (moment.every != null) {
    return moment;
  }
  every = function(anchor, count, unit) {
    var res;
    res = {
      nth: function(n) {
        return anchor.clone().add(count * n, unit);
      },
      anchor: anchor,
      count: function(d) {
        var diff;
        diff = d.diff(anchor, unit, true);
        diff /= count;
        return diff;
      },
      after: function(d) {
        var diff;
        diff = d.diff(anchor, unit, true);
        diff /= count;
        diff = Math.ceil(diff);
        return res.nth(diff);
      },
      before: function(d) {
        var diff;
        diff = d.diff(anchor, unit, true);
        diff /= count;
        diff = Math.floor(diff);
        return res.nth(diff);
      },
      between: function(start, end) {
        var endindex, i, nextstartindex, prevendindex, ref, results, startindex;
        if (start.isAfter(end)) {
          ref = [end, start], start = ref[0], end = ref[1];
        }
        startindex = res.count(start);
        nextstartindex = Math.ceil(startindex);
        if (nextstartindex === startindex) {
          nextstartindex++;
        }
        endindex = res.count(end);
        prevendindex = Math.floor(endindex);
        if (prevendindex === endindex) {
          prevendindex--;
        }
        if (nextstartindex > prevendindex) {
          return [];
        }
        return (function() {
          results = [];
          for (var i = nextstartindex; nextstartindex <= prevendindex ? i <= prevendindex : i >= prevendindex; nextstartindex <= prevendindex ? i++ : i--){ results.push(i); }
          return results;
        }).apply(this).map(res.nth);
      },
      clone: function() {
        return anchor.clone().every(count, unit);
      },
      forward: function(n) {
        return anchor.add(count * n, unit);
      },
      backward: function(n) {
        return anchor.subtract(count * n, unit);
      }
    };
    return res;
  };
  moment.every = function(count, unit) {
    return every(moment(), count, unit);
  };
  moment.fn.every = function(count, unit) {
    return every(this, count, unit);
  };
  return moment;
};
